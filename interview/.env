# Topic JavaScript Executin Context
# 1) Global execution context --- kept in this
# * JS is Single threded 
# 2) Function execution context
# 3) optional right know --- Eval execution context


# Phases
# 1. Memory Creation Phase ---- a memory alocation phase
# 2. Execution Phase

# let val1 = 10 
# let val2 = 5
# function addNum(){
#     let total = num1 + num2
#     return total
# }

# let result1 = addNum(val1, val2)
# let result2 = addNum(10, 2)


# How js works

# 1. Global execution -- into this
# 2. Memory phase --- 1) val1 = undefined
#                     2) val2 = undefined 
#                     3) addNum = defination
#                     4) result1 = undefined
#                     5) result2 = undefined
# 3. Execution phase --- 1) val1 = 10
#                        2) val2 = 5
#                        3) addNum = different executional context(delete after Use) ---- new variable environment  + Executional thread --- 1) Memory Phase --- 1) val1 = undefined  2) val2 = undefined 3) total = undefined
#                                                                                                                          2) Execution context ---- 1) num1 = 10  2) num2 = 5  3) total = 15  -- return to the global execution
# 




# Callstack  --- Global execution 


#  if function has funtion in it it follows the lifo i.e last in first out 


























